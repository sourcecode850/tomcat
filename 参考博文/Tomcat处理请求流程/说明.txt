这部分内容摘自博文：https://www.cnblogs.com/wansw/p/10244039.html
Tomcat处理请求流程
文章图文并茂，思路清晰，谢谢作者

大致流程：
Connector组件的Acceptor监听客户端套接字连接并接收Socket。
将连接交给线程池Executor处理，开始执行请求响应任务。
Processor组件读取消息报文，解析请求行、请求体、请求头，封装成Request对象。
Mapper组件根据请求行的URL值和请求头的Host值匹配由哪个Host容器、Context容器、Wrapper容器处理请求。
CoyoteAdaptor组件负责将Connector组件和Engine容器关联起来，把生成的Request对象和响应对象Response传递到Engine容器中，调用 Pipeline。
Engine容器的管道开始处理，管道中包含若干个Valve、每个Valve负责部分处理逻辑。执行完Valve后会执行基础的 Valve--StandardEngineValve，负责调用Host容器的Pipeline。
Host容器的管道开始处理，流程类似，最后执行 Context容器的Pipeline。
Context容器的管道开始处理，流程类似，最后执行 Wrapper容器的Pipeline。
Wrapper容器的管道开始处理，流程类似，最后执行 Wrapper容器对应的Servlet对象的 处理方法

Connector
<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
<Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
​ Connector用于接收请求并将请求封装成Request和Response来具体处理。最底层使用的是 Socket。Request和Response封装后交给Container（Servlet的容器）处理请求，Container处理后返回给Connector，最后由Socket返回给客户端。

结构

​ Connector中具体是用 ProtocolHandler处理请求的，代表不同的连接类型。Http11Protocol使用普通Socket连接，Http11NioProtocol使用NioSocket连接。

​ProtocolHandler（AbstractProtocol）中有三个重要的组件：

AsyncTimeout(内部类)：检查异步Request请求的超时；检查异步request请求超时；好像没有异步request吧

Endpoint(成员)：处理底层的Socket网络连接；
Processor(成员)：将Endpoint接收的Socket封装成Request；
Adapter(成员)：将封装后的Request交给Container处理；


Endpoint的抽象类 AbstractEndpoint定义了 Acceptor内部类 和 Handler接口。
Acceptor(内部类)：监听请求；
Handler(内部接口：AbstractProtocol的内部类ConnectionHandler抽象类实现此接口)：处理接收的Socket，内部调用 Processor(Http11Processor)进行处理；

NioEndpoint中：
Poller(内部类)
SocketProcessor(内部类)
